{"version":3,"sources":["components/error-boundle/error-massage/deth-star.png","components/header/index.js","components/header/header.js","service/index.js","service/swapi-service.js","components/spiner/index.js","components/spiner/spiner.js","components/error-boundle/error-massage/index.js","components/error-boundle/error-massage/error-massege.js","components/error-boundle/index.js","components/error-boundle/error-boundle.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/block/index.js","components/block/block.js","components/swapi-service-context/swapi-service-context.js","components/hoc-helper/hoc-halper.js","components/hoc-helper/with-swapi-service.js","components/item-list/item-list.js","components/item-list/index.js","components/sw-component/lists.js","components/item-details/item-details.js","components/sw-component/person-details.js","components/sw-component/planet-details.js","components/sw-component/starship-details.js","components/pages/people-page.js","components/pages/starships-page.js","components/pages/planets-page.js","components/pages/secret-page.js","components/pages/login-page.js","components/app/index.js","components/app/app.js","index.js"],"names":["module","exports","Header","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","React","Component","SwapiService","getAllPeople","a","getResourse","people","results","map","_transformPerson","getPerson","person","getAllStarships","starships","_transformStarship","getStarship","starship","getAllPlanets","planets","_transformPlanet","getPlanet","planet","_getId","name","population","rotationPeriod","rotation_period","diameter","img","_getImg","gender","birthYear","birth_year","eyeColor","eye_color","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","this","_api_base","_img_base","url","fetch","res","ok","Error","status","json","data","item","match","Spiner","ErrorMassege","role","src","Img","alt","ErrorBoundle","state","onerror","setState","props","children","RandomPlanet","onload","error","swapiService","updateInterval","updatePlanet","interval","setInterval","Math","floor","random","then","catch","onError","LoadItem","defaultProps","PlanetView","img_url","Block","createContext","SwapiProvider","Provider","SwapiConsumer","Consumer","LoadIndicator","withData","View","getData","load","ErrorMassage","withSwapiService","Wraped","ItemList","onItemSelected","renderLabel","coll","itemsList","key","onClick","withChildFunc","renderFunc","PeopleList","PlanetsList","StarshipsList","Record","field","label","SelectItem","Item","updateItem","prevProps","itemId","Children","child","cloneElement","withRouter","history","push","StarshipsPage","selectPerson","params","SecretPage","isLoggedIn","LoginPage","onLogin","App","value","path","render","exact","component","PeoplePage","PlanetsPage","ReactDOM","document","getElementById"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,uC,0UCE5BC,G,uLCKX,OACE,yBAAKC,UAAU,uCACb,kBAAC,IAAD,CAAMA,UAAU,oBAAoBC,GAAG,KACrC,uCAGF,4BACED,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,cACZC,gBAAc,aACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMP,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BQ,GAAG,cAC3C,wBAAIR,UAAU,gCACZ,4BACE,kBAAC,IAAD,CAAMC,GAAG,YAAT,WAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,YAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,cAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,gBAAT,kB,GAnCsBQ,IAAMC,Y,wBCH3BC,E,WCDb,aAAe,IAAD,gCAuBdC,aAvBc,sBAuBC,4BAAAC,EAAA,sEACQ,EAAKC,YAAY,YADzB,cACPC,EADO,yBAENA,EAAOC,QAAQC,IAAI,EAAKC,mBAFlB,2CAvBD,KA4BdC,UA5Bc,uCA4BF,WAAMX,GAAN,eAAAK,EAAA,sEACW,EAAKC,YAAL,kBAA4BN,IADvC,cACJY,EADI,yBAEH,EAAKF,iBAAiBE,IAFnB,2CA5BE,2DAiCdC,gBAjCc,sBAiCI,4BAAAR,EAAA,sEACQ,EAAKC,YAAY,eADzB,cACVQ,EADU,yBAETA,EAAUN,QAAQC,IAAI,EAAKM,qBAFlB,2CAjCJ,KAsCdC,YAtCc,uCAsCA,WAAMhB,GAAN,eAAAK,EAAA,sEACW,EAAKC,YAAL,qBAA+BN,IAD1C,cACNiB,EADM,yBAEL,EAAKF,mBAAmBE,IAFnB,2CAtCA,2DA2CdC,cA3Cc,sBA2CE,4BAAAb,EAAA,sEACQ,EAAKC,YAAY,aADzB,cACRa,EADQ,yBAEPA,EAAQX,QAAQC,IAAI,EAAKW,mBAFlB,2CA3CF,KAgDdC,UAhDc,uCAgDF,WAAMrB,GAAN,eAAAK,EAAA,sEACW,EAAKC,YAAL,mBAA6BN,IADxC,cACJsB,EADI,yBAGH,EAAKF,iBAAiBE,IAHnB,2CAhDE,2DA2DdF,iBAAmB,SAAAE,GACjB,MAAO,CACLtB,GAAI,EAAKuB,OAAOD,GAChBE,KAAMF,EAAOE,KACbC,WAAYH,EAAOG,WACnBC,eAAgBJ,EAAOK,gBACvBC,SAAUN,EAAOM,SACjBC,IAAK,EAAKC,QAAL,mBAAyB,EAAKP,OAAOD,GAArC,WAlEK,KAqEdZ,iBAAmB,SAAAE,GACjB,MAAO,CACLZ,GAAI,EAAKuB,OAAOX,GAChBY,KAAMZ,EAAOY,KACbO,OAAQnB,EAAOmB,OACfC,UAAWpB,EAAOqB,WAClBC,SAAUtB,EAAOuB,UACjBN,IAAK,EAAKC,QAAL,sBAA4B,EAAKP,OAAOX,GAAxC,WA5EK,KA+EdG,mBAAqB,SAAAE,GACnB,MAAO,CACLjB,GAAI,EAAKuB,OAAON,GAChBO,KAAMP,EAASO,KACfY,MAAOnB,EAASmB,MAChBC,aAAcpB,EAASoB,aACvBC,cAAerB,EAASsB,gBACxBC,OAAQvB,EAASuB,OACjBC,KAAMxB,EAASwB,KACfC,WAAYzB,EAASyB,WACrBC,cAAe1B,EAAS2B,eACxBf,IAAK,EAAKC,QAAL,qBAA2B,EAAKP,OAAON,GAAvC,WAzFP4B,KAAKC,UAAY,uBACjBD,KAAKE,UAAY,8C,iGAIDC,G,uFACEC,MAAMJ,KAAKC,UAAYE,G,WAAnCE,E,QAEGC,G,sBACD,IAAIC,MAAJ,gNACqCP,KAAKC,UAC5CE,EAFE,kDAEaE,EAAIG,S,gCAIlBH,EAAII,Q,qIAGLC,GACN,MAAM,GAAN,OAAUV,KAAKE,WAAf,OAA2BQ,K,6BAmCtBC,GACL,OAAOA,EAAKR,IAAIS,MAAM,iBAAiB,O,KCvD5BC,G,MCEA,WACb,OACE,yBAAKlE,UAAU,8BACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,mBACb,8BACA,8BACA,6BACE,+BAEF,6BACE,oC,yBCbGmE,ECGM,WACnB,OACE,yBAAKnE,UAAU,QAAQoE,KAAK,SAC1B,yBAAKC,IAAKC,IAAKC,IAAI,kBACnB,qCACA,gEACA,qECTSC,E,2MCGbC,MAAQ,CACNC,SAAS,G,mFAITrB,KAAKsB,SAAS,CAAED,SAAS,M,+BAKzB,OAAIrB,KAAKoB,MAAMC,QAAgB,kBAAC,EAAD,MAExBrB,KAAKuB,MAAMC,a,GAboBpE,IAAMC,WCO3BoE,G,iNAUnBL,MAAQ,CACN3C,OAAQ,GACRiD,QAAQ,EACRC,OAAO,G,EAGTC,aAAe,IAAItE,E,mFAEE,IAAD,OACVuE,EAAmB7B,KAAKuB,MAAxBM,eACR7B,KAAK8B,eACL9B,KAAK+B,SAAWC,aAAY,kBAAM,EAAKF,iBAAgBD,K,qCAGzC,IAAD,QAIbrD,EAHsBwB,KAAK4B,aAAnBpD,WACGyD,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GAGzCC,MAAK,SAAA3D,GAAM,OAAI,EAAK6C,SAAS,CAAE7C,SAAQiD,QAAQ,OAC/CW,OAAM,kBAAM,EAAKC,e,gCAIpBtC,KAAKsB,SAAS,CAAEK,OAAO,M,+BAGf,IAAD,EAC2B3B,KAAKoB,MAA/BM,EADD,EACCA,OAAQjD,EADT,EACSA,OAEhB,GAHO,EACkBkD,MAEd,OAAO,kBAAC,EAAD,MAElB,IAAMY,EAAWb,EAAS,kBAAC,EAAD,MAAa,kBAAC,EAAD,CAAYjD,OAAQA,IAE3D,OACE,kBAAC,EAAD,KACE,yBAAK9B,UAAU,gCACb,yBAAKA,UAAU,aAAa4F,S,GA/CInF,IAAMC,YAA3BoE,EAEZe,aAAe,CACpBX,eAAgB,KAmDpB,IAAMY,EAAa,SAAC,GAAgB,IAAdhE,EAAa,EAAbA,OACZE,EAAmDF,EAAnDE,KAAMC,EAA6CH,EAA7CG,WAAYC,EAAiCJ,EAAjCI,eAAgBE,EAAiBN,EAAjBM,SAAU5B,EAAOsB,EAAPtB,GAC9CuF,EAAO,8DAA0DvF,EAA1D,QAEb,OACE,yBAAKR,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKqE,IAAK0B,EAAS/F,UAAU,aAAauE,IAAI,MAEhD,yBAAKvE,UAAU,IACb,4BAAKgC,GACL,wBAAIhC,UAAU,cACZ,wBAAIA,UAAU,mBAAd,eAA6CiC,GAC7C,wBAAIjC,UAAU,mBAAd,oBAAkDkC,GAClD,wBAAIlC,UAAU,mBAAd,aAA2CoC,OC7EtC0C,ICAAkB,E,iLCIX,OACE,yBAAKhG,UAAU,aACb,yBAAKA,UAAU,cAAcqD,KAAKuB,MAAMC,e,GAJ5BpE,IAAMC,W,ECCtBD,IAAMwF,gBAFEC,E,EAAVC,SACUC,E,EAAVC,SCEIC,EACJ,yBAAKtG,UAAU,8EACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,QAMAuG,EAAW,SAACC,EAAMC,GACtB,kNACEhC,MAAQ,CACNV,KAAM,KACNiB,OAAO,EACP0B,MAAM,GAJV,mFAOuB,IAAD,OAClBD,IACGhB,MAAK,SAAA1B,GACJ,EAAKY,SAAS,CAAEZ,OAAO2C,MAAM,OAE9BhB,OAAM,WACL,EAAKf,SAAS,CAAEK,OAAO,SAb/B,+BAiBY,IAAD,EACuB3B,KAAKoB,MAA3BV,EADD,EACCA,KAAM2C,EADP,EACOA,KAAM1B,EADb,EACaA,MAEpB,OAAI0B,EAAaJ,EAEbtB,EAAc2B,EAEX,kBAACH,EAAD,iBAAUnD,KAAKuB,MAAf,CAAsBb,KAAMA,SAxBvC,GAAqBtD,IAAMC,YCAdkG,EAZU,SAAAC,GACvB,OAAO,SAAAjC,GACL,OACE,kBAACwB,EAAD,MACG,SAAAnB,GACC,OAAO,kBAAC4B,EAAD,iBAAYjC,EAAZ,CAAmBK,aAAcA,UCJ5C6B,G,MAAW,SAAAlC,GAAU,IACjBb,EAAsDa,EAAtDb,KAAMgD,EAAgDnC,EAAhDmC,eAA0BC,EAAsBpC,EAAhCC,SAAwBoC,EAAQrC,EAARqC,KAEhDC,EAAYnD,EAAK9C,KAAI,SAAA+C,GACzB,OACE,wBACEhE,UAAU,kBACVmH,IAAKnD,EAAKxD,GACV4G,QAAS,kBAAML,EAAe/C,EAAKxD,MAElCwG,EAAYhD,OAKnB,OACE,yBAAKhE,UAAS,UAAKiH,EAAL,gCACZ,wBAAIjH,UAAU,kBAAkBkH,MAKtCJ,EAASjB,aAAe,CACtBkB,eAAgB,aAChBE,KAAM,YAQOH,ICnCAA,EDmCAA,EEhCT7B,EAAe,IAAItE,EAEnB0G,EAAgB,SAACR,EAAQS,GAC7B,OAAO,SAAA1C,GACL,OAAO,kBAACiC,EAAWjC,EAAQ0C,KAuBzBC,EAAahB,EACjBc,EAAcP,GAlBG,SAAC,GAAD,IAAG9E,EAAH,EAAGA,KAAH,OAAc,8BAAOA,MAmBtCiD,EAAarE,cAGT4G,EAAcjB,EAClBc,EAAcP,GAbc,SAAC,GAAD,IAAG9E,EAAH,EAAGA,KAAMI,EAAT,EAASA,SAAT,OAC5B,8BACGJ,EADH,KACWI,EADX,QAaA6C,EAAavD,eAGT+F,EAAgBlB,EACpBc,EAAcP,GAzBW,SAAC,GAAD,IAAG9E,EAAH,EAAGA,KAAMY,EAAT,EAASA,MAAT,OACzB,8BACGZ,EADH,KACWY,EADX,QAyBAqC,EAAa5D,iBCpCTqG,G,MAAS,SAAC,GAA4B,IAA1B1D,EAAyB,EAAzBA,KAAM2D,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC7B,OACE,wBAAI5H,UAAU,mBACZ,0BAAMA,UAAU,QAAQ4H,GACxB,8BAAO5D,EAAK2D,OAOZE,EACJ,yBAAK7H,UAAU,mBACb,yBAAKA,UAAU,gDACb,6DAKe8H,E,2MACnB7C,aAAe,IAAItE,E,EAEnB8D,MAAQ,CACNT,KAAM,KACN0C,MAAM,G,mFAINrD,KAAK0E,e,yCAGYC,GACb3E,KAAKuB,MAAMqD,SAAWD,EAAUC,SAClC5E,KAAKsB,SAAS,CAAE+B,MAAM,IACtBrD,KAAK0E,gB,mCAIK,IAAD,SACiB1E,KAAKuB,MAAzBqD,EADG,EACHA,OAAQxB,EADL,EACKA,QAEXwB,GAILxB,EAAQwB,GAAQxC,MAAK,SAAAzB,GACnB,EAAKW,SAAS,CACZX,OACA0C,MAAM,S,+BAKF,IAAD,EACgBrD,KAAKoB,MAApBT,EADD,EACCA,KAER,GAHO,EACO0C,KAGZ,OACE,yBAAK1G,UAAU,mBACb,yBAAKA,UAAU,gDACb,kBAAC,EAAD,QAKR,GAAa,OAATgE,EAAe,OAAO6D,EAZnB,IAcC7F,EAAcgC,EAAdhC,KAAMK,EAAQ2B,EAAR3B,IAEd,OACE,yBAAKrC,UAAU,mBACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,aAAaqE,IAAKhC,EAAKkC,IAAI,SAE1C,yBAAKvE,UAAU,aACb,4BAAKgC,GACL,wBAAIhC,UAAU,+BAEXS,IAAMyH,SAASjH,IAAIoC,KAAKuB,MAAMC,UAAU,SAAAsD,GACvC,OAAO1H,IAAM2H,aAAaD,EAAO,CAAEnE,oB,GA5DjBvD,IAAMC,WCZzBkG,KAVO,SAAC,GAA8B,IAA5BqB,EAA2B,EAA3BA,OAAQhD,EAAmB,EAAnBA,aAC/B,OACE,kBAAC,EAAD,CAAMgD,OAAQA,EAAQxB,QAASxB,EAAa9D,WAC1C,kBAAC,EAAD,CAAQwG,MAAM,SAASC,MAAM,WAC7B,kBAAC,EAAD,CAAQD,MAAM,WAAWC,MAAM,cAC/B,kBAAC,EAAD,CAAQD,MAAM,YAAYC,MAAM,mBCMvBhB,KAVO,SAAC,GAA8B,IAA5BqB,EAA2B,EAA3BA,OAAQhD,EAAmB,EAAnBA,aAC/B,OACE,kBAAC,EAAD,CAAMgD,OAAQA,EAAQxB,QAASxB,EAAapD,WAC1C,kBAAC,EAAD,CAAQ8F,MAAM,aAAaC,MAAM,eACjC,kBAAC,EAAD,CAAQD,MAAM,iBAAiBC,MAAM,oBACrC,kBAAC,EAAD,CAAQD,MAAM,WAAWC,MAAM,iBCKtBhB,KAVS,SAAC,GAA8B,IAA5BqB,EAA2B,EAA3BA,OAAQhD,EAAmB,EAAnBA,aACjC,OACE,kBAAC,EAAD,CAAMgD,OAAQA,EAAQxB,QAASxB,EAAazD,aAC1C,kBAAC,EAAD,CAAQmG,MAAM,QAAQC,MAAM,UAC5B,kBAAC,EAAD,CAAQD,MAAM,SAASC,MAAM,WAC7B,kBAAC,EAAD,CAAQD,MAAM,gBAAgBC,MAAM,aCO3BS,eAZI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACE,kBAACf,EAAD,CACEN,KAAK,SACLF,eAAgB,SAAAkB,GAEdK,EAAQC,KAAKN,SCNAO,E,2MACnB/D,MAAQ,CACNwD,OAAQ,M,EAGVQ,aAAe,SAAAR,GACb,EAAKtD,SAAS,CAAEsD,Y,wEAIhB,OACE,kBAAC,EAAD,KACE,kBAACR,EAAD,CAAeV,eAAgB1D,KAAKoF,eACpC,kBAAC,EAAD,CAAiBR,OAAQ5E,KAAKoB,MAAMwD,c,GAbDvH,aCc5B2H,eAZK,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,QACb9H,EADiC,EAAXyD,MACVyE,OAAZlI,GAEL,OACE,kBAAC,EAAD,KACE,kBAACgH,EAAD,CAAaT,eAAgB,SAACvG,GAAD,OAAQ8H,EAAQC,KAAK/H,MAClD,kBAAC,EAAD,CAAeyH,OAAQzH,QCIhBmI,EAdI,SAAC,GAClB,OADqC,EAAjBC,WAGhB,yBAAK5I,UAAU,yBACb,gEAML,kBAAC,IAAD,CAAUC,GAAG,YCID4I,EAdG,SAAC,GAA6B,IAA3BD,EAA0B,EAA1BA,WAAYE,EAAc,EAAdA,QAC7B,OAAGF,EAAmB,kBAAC,IAAD,CAAU3I,GAAK,MAGrC,yBAAKD,UAAU,aACb,wDAEA,4BAAQA,UAAU,kBAAkBoH,QAAS0B,GAA7C,WCTSC,G,iNCwBbtE,MAAQ,CACNmE,YAAY,G,EAGdE,QAAU,WACR,EAAKnE,SAAS,CAAEiE,YAAY,K,EAG9B3D,aAAe,IAAItE,E,wEAET,IAAD,OACCiI,EAAevF,KAAKoB,MAApBmE,WAER,OACE,yBAAK5I,UAAU,oCACb,kBAAC,EAAD,KACE,kBAACkG,EAAD,CAAe8C,MAAO3F,KAAK4B,cACzB,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEgE,KAAK,IACLC,OAAQ,WACN,OAAO,kDAETC,OAAK,IAEP,kBAAC,IAAD,CAAOF,KAAK,UAAUE,OAAK,EAACC,UAAWC,IAEvC,kBAAC,IAAD,CAAOJ,KAAK,gBAAgBE,OAAK,EAACC,UAAWE,IAC7C,kBAAC,IAAD,CAAOL,KAAK,aAAaE,OAAK,EAACC,UAAWZ,IAE1C,kBAAC,IAAD,CACES,KAAK,cACLC,OAAQ,YAAgB,IACd1I,EADa,EAAZyD,MACYyE,OAAblI,GAER,OAAO,kBAAC,EAAD,CAAeyH,OAAQzH,OAIlC,kBAAC,IAAD,CACEyI,KAAK,SACLC,OAAQ,WACN,OACE,kBAAC,EAAD,CACEN,WAAYA,EACZE,QAAS,EAAKA,aAKtB,kBAAC,IAAD,CACEG,KAAK,eACLC,OAAQ,WACN,OAAO,kBAAC,EAAD,CAAYN,WAAYA,OAGnC,kBAAC,IAAD,CAAOM,OAAQ,kBAAM,2D,GA9DJzI,IAAMC,Y,MClBvC6I,IAASL,OAAO,kBAAC,EAAD,MAASM,SAASC,eAAe,W","file":"static/js/main.1484800c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/deth-star.81c98480.png\";","import Header from './header';\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./header.css\";\r\n// Компонент отвечающий за шапку spa, и меню навигации\r\nexport default class Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark\">\r\n        <Link className=\" btn navbar-brand\" to=\"/\">\r\n          <h3>StarDB</h3>\r\n        </Link>\r\n\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarText\"\r\n          aria-controls=\"navbarText\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        {/*Переход к нужным страницам(рендер) черз роутинг*/}\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n          <ul className=\"navbar-nav mr-auto btn-group\">\r\n            <li>\r\n              <Link to=\"/people/\">People</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/planets/\">Planets</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/starships/\">Starships</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/login\">Login</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/secret-page\">Secret</Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import SwapiService from './swapi-service';\r\n\r\nexport default SwapiService;\r\n","export default class SwapiService {\r\n  constructor() {\r\n    this._api_base = \"https://swapi.co/api\";\r\n    this._img_base = \"https://starwars-visualguide.com/assets/img\";\r\n  }\r\n\r\n  // Основная функция на основе которой осуществляется запрос к ДБ\r\n  async getResourse(url) {\r\n    const res = await fetch(this._api_base + url);\r\n\r\n    if (!res.ok) {\r\n      throw new Error(\r\n        `Не удалось запросить данные по адресу ${this._api_base +\r\n          url}, статус ${res.status}`\r\n      );\r\n    }\r\n\r\n    return res.json();\r\n  }\r\n  // Получает сылку на базу с изображениями + раздел из параметров\r\n  _getImg(data) {\r\n    return `${this._img_base}${data}`;\r\n  }\r\n  // Получает список всех персонажей\r\n  getAllPeople = async () => {\r\n    const people = await this.getResourse(\"/people/\");\r\n    return people.results.map(this._transformPerson);\r\n  };\r\n  // Получение конкретного персонажа по id\r\n  getPerson = async id => {\r\n    const person = await this.getResourse(`/people/${id}`);\r\n    return this._transformPerson(person);\r\n  };\r\n  // Получение всех кораблей\r\n  getAllStarships = async () => {\r\n    const starships = await this.getResourse(\"/starships/\");\r\n    return starships.results.map(this._transformStarship);\r\n  };\r\n  //Получени конкретного корабля по id\r\n  getStarship = async id => {\r\n    const starship = await this.getResourse(`/starships/${id}`);\r\n    return this._transformStarship(starship);\r\n  };\r\n  // Получение всех планет \r\n  getAllPlanets = async () => {\r\n    const planets = await this.getResourse(\"/planets/\");\r\n    return planets.results.map(this._transformPlanet);\r\n  };\r\n  // Получение конкретной планеты\r\n  getPlanet = async id => {\r\n    const planet = await this.getResourse(`/planets/${id}`);\r\n\r\n    return this._transformPlanet(planet);\r\n  };\r\n  // Поскольку изначально в возвращаемых обьeктах с сервера нет id ,\r\n  // то для получения выбираем его из ссылки \r\n  _getId(item) {\r\n    return item.url.match(/\\/([0-9]*)\\/$/)[1];\r\n  }\r\n  // Выбирает только необходимые данные для работы приложения:\r\n  _transformPlanet = planet => {\r\n    return {\r\n      id: this._getId(planet),\r\n      name: planet.name,\r\n      population: planet.population,\r\n      rotationPeriod: planet.rotation_period,\r\n      diameter: planet.diameter,\r\n      img: this._getImg(`/planets/${this._getId(planet)}.jpg`)\r\n    };\r\n  };\r\n  _transformPerson = person => {\r\n    return {\r\n      id: this._getId(person),\r\n      name: person.name,\r\n      gender: person.gender,\r\n      birthYear: person.birth_year,\r\n      eyeColor: person.eye_color,\r\n      img: this._getImg(`/characters/${this._getId(person)}.jpg`)\r\n    };\r\n  };\r\n  _transformStarship = starship => {\r\n    return {\r\n      id: this._getId(starship),\r\n      name: starship.name,\r\n      model: starship.model,\r\n      manufacturer: starship.manufacturer,\r\n      costInCredits: starship.cost_in_credits,\r\n      length: starship.length,\r\n      crew: starship.crew,\r\n      passengers: starship.passengers,\r\n      cargoCapacity: starship.cargo_capacity,\r\n      img: this._getImg(`/starships/${this._getId(starship)}.jpg`)\r\n    };\r\n  };\r\n}\r\n","import Spiner from './spiner';\r\n\r\nexport default Spiner;","import React from \"react\";\r\n\r\nimport \"./spiner.css\";\r\n// Компонент индикатор загрузки\r\nconst Spiner = () => {\r\n  return (\r\n    <div className=\"row justify-content-center\">\r\n      <div className=\"lds-css ng-scope\">\r\n        <div className=\"lds-double-ring\">\r\n          <div></div>\r\n          <div></div>\r\n          <div>\r\n            <div></div>\r\n          </div>\r\n          <div>\r\n            <div></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spiner;\r\n","import ErrorMassege from './error-massege';\r\n\r\nexport default ErrorMassege;","import React from \"react\";\r\n\r\nimport \"./error-massage.css\";\r\nimport Img from \"./deth-star.png\";\r\n\r\nconst ErrorMassege = () => {\r\n  return (\r\n    <div className=\"error\" role=\"alert\">\r\n      <img src={Img} alt=\"error-massage\" />\r\n      <h2>BOOM!</h2>\r\n      <p>something has gone terribly wrong</p>\r\n      <p>(but we alredy sent droid to fix it)</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorMassege;\r\n","import ErrorBoundle from './error-boundle';\r\n\r\nexport default ErrorBoundle;","import React from \"react\";\r\nimport ErrorMassege from \"./error-massage\";\r\n\r\n// Вспомагающий компонент, для отлова и обработки ошибок вложеных в него компонентов\r\nexport default class ErrorBoundle extends React.Component {\r\n  state = {\r\n    onerror: false\r\n  };\r\n\r\n  componentDidCatch() {\r\n    this.setState({ onerror: true });\r\n  }\r\n\r\n  render() {\r\n    // В случае возникновения ошибки вернем компонент который служит о ее индикации\r\n    if (this.state.onerror) return <ErrorMassege />;\r\n    // Если ошибки нет, возвращаем вложеные компоненты\r\n    return this.props.children;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport SwapiService from \"../../service\";\r\nimport Spiner from \"../spiner\";\r\nimport ErrorBoundle from \"../error-boundle\";\r\nimport ErrorMassage from \"../error-boundle/error-massage\";\r\n\r\nimport \"./random-planet.css\";\r\n\r\n// Компонент который рендерит случайную планету в указаный промежуток времени\r\nexport default class RandomPlanet extends React.Component {\r\n  // Время пере-рендера по умолчанию\r\n  static defaultProps = {\r\n    updateInterval: 10000\r\n  };\r\n  // Указание типизации для параметра отвечающего за время обновления компонента\r\n  static propTypes = {\r\n    updateInterval: PropTypes.number\r\n  };\r\n\r\n  state = {\r\n    planet: {},\r\n    onload: true,\r\n    error: false\r\n  };\r\n\r\n  swapiService = new SwapiService();\r\n\r\n  componentDidMount() {\r\n    const { updateInterval } = this.props;\r\n    this.updatePlanet();\r\n    this.interval = setInterval(() => this.updatePlanet(), updateInterval);\r\n  }\r\n  // Обновление планеты\r\n  updatePlanet() {\r\n    const { getPlanet } = this.swapiService;\r\n    const id = Math.floor(Math.random() * 18) + 2;\r\n\r\n    getPlanet(id)\r\n      .then(planet => this.setState({ planet, onload: false }))\r\n      .catch(() => this.onError());\r\n  }\r\n  // Оббработчик ошибок\r\n  onError() {\r\n    this.setState({ error: true });\r\n  }\r\n\r\n  render() {\r\n    const { onload, planet , error} = this.state;\r\n\r\n    if (error) return <ErrorMassage />;\r\n\r\n    const LoadItem = onload ? <Spiner /> : <PlanetView planet={planet} />;\r\n\r\n    return (\r\n      <ErrorBoundle>\r\n        <div className=\"random-planet bg-dark col-12\">\r\n          <div className=\"container\">{LoadItem}</div>\r\n        </div>\r\n      </ErrorBoundle>\r\n    );\r\n  }\r\n}\r\n// Компонент отвечающий за отрисовку планеты\r\nconst PlanetView = ({ planet }) => {\r\n  const { name, population, rotationPeriod, diameter, id } = planet;\r\n  const img_url = `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`;\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"img-cont\">\r\n        <img src={img_url} className=\"planet-img\" alt=\"\" />\r\n      </div>\r\n      <div className=\"\">\r\n        <h3>{name}</h3>\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Population: {population}</li>\r\n          <li className=\"list-group-item\">Rotation period: {rotationPeriod}</li>\r\n          <li className=\"list-group-item\">Diameter: {diameter}</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import RandomPlanet from './random-planet';\r\n\r\nexport default RandomPlanet;","import Block from './block';\r\n\r\nexport default Block;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Вспомогательны компонент который оборачивает в отдельный блок вложеные в него компоненты\r\nclass Block extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row d-flex\">{this.props.children}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Проверка что вложенные компоненты точно являются компонентами\r\nBlock.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Block;\r\n","import React from \"react\";\r\n// Cоздание вспомогательного контекста, для свободного доступа к сервисам из любого компонента\r\nconst {\r\n  Provider: SwapiProvider,\r\n  Consumer: SwapiConsumer\r\n} = React.createContext();\r\n\r\nexport { SwapiProvider, SwapiConsumer };\r\n","import React from \"react\";\r\n\r\nimport Spiner from \"../spiner\";\r\nimport ErrorMassage from \"../error-boundle/error-massage\";\r\n\r\n// Статичный компонент для индикации загрузки страницы\r\nconst LoadIndicator = (\r\n  <div className=\"container col-lg-4 col-12 d-flex justify-content-center align-items-center\">\r\n    <div className=\"row\">\r\n      <Spiner />\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// Компонент высшего порядка отвечающий за логику в компоненте item-list \r\nconst withData = (View, getData) => {\r\n  return class extends React.Component {\r\n    state = {\r\n      data: null,\r\n      error: false,\r\n      load: true\r\n    };\r\n// Ф-я getData отвечает за получение, данных с сервера передается параметрами в файле конечной конфигурации sw-component\r\n    componentDidMount() {\r\n      getData()\r\n        .then(data => {\r\n          this.setState({ data , load: false});\r\n        })\r\n        .catch(() => {\r\n          this.setState({ error: true });\r\n        });\r\n    }\r\n\r\n    render() {\r\n      const { data, load, error } = this.state;\r\n\r\n      if (load) return LoadIndicator;\r\n\r\n      if (error) return ErrorMassage;\r\n\r\n      return <View {...this.props} data={data} />;\r\n    }\r\n  };\r\n};\r\nexport { withData };\r\n","import React from \"react\";\r\n\r\nimport { SwapiConsumer } from \"../swapi-service-context\";\r\n// Вспомогательный компонент высшего порядка, для передачи контекста в виде сервиса\r\nconst withSwapiService = Wraped => {\r\n  return props => {\r\n    return (\r\n      <SwapiConsumer>\r\n        {swapiService => {\r\n          return <Wraped {...props} swapiService={swapiService} />;\r\n        }}\r\n      </SwapiConsumer>\r\n    );\r\n  };\r\n};\r\n\r\nexport default withSwapiService;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./item-list.css\";\r\n// Компонент отвечающий за отрисовку всех списков-меню в spa, логика обновления и отлова ошибок убрана для удобства в HOC компонент hoc-helper.js\r\nconst ItemList = props => {\r\n  const { data, onItemSelected, children: renderLabel , coll} = props;\r\n\r\n  const itemsList = data.map(item => {\r\n    return (\r\n      <li\r\n        className=\"list-group-item\"\r\n        key={item.id}\r\n        onClick={() => onItemSelected(item.id)}\r\n      >\r\n        {renderLabel(item)}\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={`${coll} item-list container col-12`}>\r\n      <ul className=\"list-group row\">{itemsList}</ul>\r\n    </div>\r\n  );\r\n};\r\n// Указание значений по умолчанию, для переданых в компонент пропсов\r\nItemList.defaultProps = {\r\n  onItemSelected: () => {},\r\n  coll: 'col-lg-4'\r\n};\r\n// Указание типизации для передаваемых пропсов, при помщи библеотеки prop-types\r\nItemList.propTypes = {\r\n  onItemSelected: PropTypes.func,\r\n  data: PropTypes.arrayOf(PropTypes.object).isRequired\r\n};\r\n\r\nexport default ItemList;\r\n","import ItemList from './item-list';\r\n\r\nexport default ItemList;","import React from \"react\";\r\nimport SwapiService from \"../../service\";\r\nimport { withData } from \"../hoc-helper\";\r\nimport ItemList from \"../item-list\";\r\n\r\nconst swapiService = new SwapiService();\r\n// Вспомогательная ф-я которая передаст в переданый компонент, ф-ю конфигурации\r\nconst withChildFunc = (Wraped, renderFunc) => {\r\n  return props => {\r\n    return <Wraped {...props}>{renderFunc}</Wraped>;\r\n  };\r\n};\r\n// Ф-и конфигурации для разных компонентов\r\n\r\n// Персонажи\r\nconst renderName = ({ name }) => <span>{name}</span>;\r\n\r\n// Корабли\r\nconst renderNameAndModel = ({ name, model }) => (\r\n  <span>\r\n    {name} ({model})\r\n  </span>\r\n);\r\n\r\n// Планеты\r\nconst renderNameAndDiameter = ({ name, diameter }) => (\r\n  <span>\r\n    {name} ({diameter})\r\n  </span>\r\n);\r\n\r\n// Конечная конфигурация компонентов\r\nconst PeopleList = withData(\r\n  withChildFunc(ItemList, renderName),\r\n  swapiService.getAllPeople\r\n);\r\n\r\nconst PlanetsList = withData(\r\n  withChildFunc(ItemList, renderNameAndDiameter),\r\n  swapiService.getAllPlanets\r\n);\r\n\r\nconst StarshipsList = withData(\r\n  withChildFunc(ItemList, renderNameAndModel),\r\n  swapiService.getAllStarships\r\n);\r\n\r\nexport { PeopleList, PlanetsList, StarshipsList };\r\n","import React from \"react\";\r\n\r\nimport SwapiService from \"../../service\";\r\nimport Spiner from \"../spiner\";\r\n\r\nimport \"./item-details.css\";\r\n// Компонент-шаблон, для отоброжания характеристики выбраного(ой) палнеты, персонажа или корабля\r\n// В этот компонент передается только опцыи field и label, а item добавится уже в основном компоненте \r\nconst Record = ({ item, field, label }) => {\r\n  return (\r\n    <li className=\"list-group-item\">\r\n      <span className=\"term\">{label}</span>\r\n      <span>{item[field]}</span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport { Record };\r\n// Сообщение показывается при первом заходе на страницу\r\nconst SelectItem = (\r\n  <div className=\"container col-8\">\r\n    <div className=\"item-details card row justify-content-center\">\r\n      <span>Select a item from a list</span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default class Item extends React.Component {\r\n  swapiService = new SwapiService();\r\n\r\n  state = {\r\n    item: null,\r\n    load: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.updateItem();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.itemId !== prevProps.itemId) {\r\n      this.setState({ load: true });\r\n      this.updateItem();\r\n    }\r\n  }\r\n\r\n  updateItem() {\r\n    const { itemId, getData } = this.props;\r\n    // Если передано некоректное id\r\n    if (!itemId) {\r\n      return;\r\n    }\r\n\r\n    getData(itemId).then(item => {\r\n      this.setState({\r\n        item,\r\n        load: false\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { item, load } = this.state;\r\n\r\n    if (load)\r\n      return (\r\n        <div className=\"container col-8\">\r\n          <div className=\"item-details card row justify-content-center\">\r\n            <Spiner />\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n    if (item === null) return SelectItem;\r\n\r\n    const { name, img } = item;\r\n\r\n    return (\r\n      <div className=\"container col-8\">\r\n        <div className=\"item-details card row\">\r\n          <img className=\"item-image\" src={img} alt=\"item\" />\r\n\r\n          <div className=\"card-body\">\r\n            <h4>{name}</h4>\r\n            <ul className=\"list-group list-group-flush\">\r\n              {/* Сюда передаются компоненты Record, и путем клонирывание создаются такие же елеиенты но с правельным item*/}\r\n              {React.Children.map(this.props.children, child => {\r\n                return React.cloneElement(child, { item });\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Item, Record } from \"../item-details\";\r\nimport { withSwapiService } from \"../hoc-helper\";\r\n// Конфигурация компонента отвечающего за отрисовку выбраного из списка персонажа\r\n// swapiService присвоится через withSwapiService\r\nconst PersonDetails = ({ itemId, swapiService }) => {\r\n  return (\r\n    <Item itemId={itemId} getData={swapiService.getPerson}>\r\n      <Record field=\"gender\" label=\"Gender\" />\r\n      <Record field=\"eyeColor\" label=\"Eye Color\" />\r\n      <Record field=\"birthYear\" label=\"Birth Year\" />\r\n    </Item>\r\n  );\r\n};\r\n\r\nexport default withSwapiService(PersonDetails);\r\n","import React from \"react\";\r\nimport { Item, Record } from \"../item-details\";\r\n\r\nimport { withSwapiService } from \"../hoc-helper\";\r\n// Конфигурация компонента отвечающего за отрисовку выбраной из списка планеты\r\n// swapiService присвоится через withSwapiService\r\nconst PlanetDetails = ({ itemId, swapiService }) => {\r\n  return (\r\n    <Item itemId={itemId} getData={swapiService.getPlanet}>\r\n      <Record field=\"population\" label=\"Population\" />\r\n      <Record field=\"rotationPeriod\" label=\"Rotation Period\" />\r\n      <Record field=\"diameter\" label=\"Diameter\" />\r\n    </Item>\r\n  );\r\n};\r\n\r\nexport default withSwapiService(PlanetDetails);\r\n","import React from \"react\";\r\nimport { Item, Record } from \"../item-details\";\r\n\r\nimport { withSwapiService } from \"../hoc-helper\";\r\n// Конфигурация компонента отвечающего за отрисовку выбраного из списка коробля\r\n// swapiService присвоится через withSwapiService\r\nconst StarshipDetails = ({ itemId, swapiService }) => {\r\n  return (\r\n    <Item itemId={itemId} getData={swapiService.getStarship}>\r\n      <Record field=\"model\" label=\"Model\" />\r\n      <Record field=\"length\" label=\"Length\" />\r\n      <Record field=\"costInCredits\" label=\"Cost\" />\r\n    </Item>\r\n  );\r\n};\r\n\r\nexport default withSwapiService(StarshipDetails);\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { PeopleList } from \"../sw-component\";\r\n\r\n// Компонент отвечающий за страницу с персонажами, при выборе отрендерит выбранго персонажа вместо списка\r\nconst PeoplePage = ({ history }) => {\r\n  return (\r\n    <PeopleList\r\n      coll=\"col-12\"\r\n      onItemSelected={itemId => {\r\n        // При помощи роутинга реализуем, простой переход на страницу персонажа\r\n        history.push(itemId);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PeoplePage);\r\n","import React, { Component } from \"react\";\r\n\r\nimport Block from \"../block\";\r\nimport { StarshipsList, StarshipDetails } from \"../sw-component\";\r\n\r\n// Компонент отвечающий за рендер страницы кораблей, без роутинга\r\nexport default class StarshipsPage extends Component {\r\n  state = {\r\n    itemId: null\r\n  };\r\n\r\n  selectPerson = itemId => {\r\n    this.setState({ itemId });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Block>\r\n        <StarshipsList onItemSelected={this.selectPerson} />\r\n        <StarshipDetails itemId={this.state.itemId} />\r\n      </Block>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nimport Block from \"../block\";\r\nimport { PlanetsList, PlanetDetails } from \"../sw-component\";\r\n\r\n// Компонент отвечающий за отрисовку планеты и списка\r\nconst PlanetsPage = ({history, match}) => {\r\n  const {id} = match.params;\r\n\r\n    return (\r\n      <Block>\r\n        <PlanetsList onItemSelected={(id) => history.push(id)}/>\r\n        <PlanetDetails itemId={id} />\r\n      </Block>\r\n    );\r\n\r\n}\r\n\r\nexport default withRouter(PlanetsPage);","import React from \"react\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n// Страница которая видна только \"залогиненым\" пользователям\r\nconst SecretPage = ({ isLoggedIn }) => {\r\n  if (isLoggedIn)\r\n    return (\r\n      <div className=\"jumbotron text-center\">\r\n        <h3>This page is full of secrets!!!</h3>\r\n      </div>\r\n    );\r\n  \r\n  // Если пользователь не залогинен то \"перенаправляет\" на страницу логина\r\n  return (\r\n   <Redirect to=\"/login\"/>\r\n  );\r\n};\r\n\r\nexport default SecretPage;\r\n","import React from \"react\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n// Компонент фейковой страницы входа, если залогинен то перенаправляет при помощи роутинга на главную страницу\r\nconst LoginPage = ({ isLoggedIn, onLogin }) => {\r\n    if(isLoggedIn) return <Redirect to = \"/\"/>\r\n\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <p>Login to see secret page!</p>\r\n      {/* Кнопка для логина */}\r\n      <button className=\"btn btn-primary\" onClick={onLogin}>\r\n        Login\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;","import App from './app';\r\n\r\nexport default App;","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch\r\n} from \"react-router-dom\";\r\n\r\nimport Header from \"../header\";\r\nimport RandomPlanet from \"../random-planet\";\r\nimport ErrorBoundle from \"../error-boundle\";\r\nimport Block from \"../block\";\r\n\r\nimport SwapiService from \"../../service\";\r\nimport { SwapiProvider } from \"../swapi-service-context\";\r\nimport {\r\n  PeoplePage,\r\n  StarshipsPage,\r\n  PlanetsPage,\r\n  LoginPage,\r\n  SecretPage\r\n} from \"../pages\";\r\nimport { PersonDetails } from \"../sw-component\";\r\n\r\nimport \"./app.css\";\r\n\r\nexport default class App extends React.Component {\r\n  state = {\r\n    isLoggedIn: false\r\n  };\r\n\r\n  onLogin = () => {\r\n    this.setState({ isLoggedIn: true });\r\n  };\r\n\r\n  swapiService = new SwapiService();\r\n\r\n  render() {\r\n    const { isLoggedIn } = this.state;\r\n\r\n    return (\r\n      <div className=\"container justify-content-center\">\r\n        <ErrorBoundle>\r\n          <SwapiProvider value={this.swapiService}>\r\n            <Router>\r\n              <Block>\r\n                <Header />\r\n                <RandomPlanet />\r\n              </Block>\r\n              <Switch>\r\n                <Route\r\n                  path=\"/\"\r\n                  render={() => {\r\n                    return <h2>Welcome to StarDB</h2>;\r\n                  }}\r\n                  exact\r\n                />\r\n                <Route path=\"/people\" exact component={PeoplePage} />\r\n\r\n                <Route path=\"/planets/:id?\" exact component={PlanetsPage} />\r\n                <Route path=\"/starships\" exact component={StarshipsPage} />\r\n\r\n                <Route\r\n                  path=\"/people/:id\"\r\n                  render={({ match }) => {\r\n                    const { id } = match.params;\r\n\r\n                    return <PersonDetails itemId={id} />;\r\n                  }}\r\n                />\r\n\r\n                <Route\r\n                  path=\"/login\"\r\n                  render={() => {\r\n                    return (\r\n                      <LoginPage\r\n                        isLoggedIn={isLoggedIn}\r\n                        onLogin={this.onLogin}\r\n                      />\r\n                    );\r\n                  }}\r\n                />\r\n                <Route\r\n                  path=\"/secret-page\"\r\n                  render={() => {\r\n                    return <SecretPage isLoggedIn={isLoggedIn} />;\r\n                  }}\r\n                />\r\n                <Route render={() => <h2> Page not found</h2>} />\r\n              </Switch>\r\n            </Router>\r\n          </SwapiProvider>\r\n        </ErrorBoundle>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/app\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}